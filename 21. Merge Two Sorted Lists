/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
      
        ListNode *newNode = new ListNode;
        
        if(l1 == NULL)
            return l2;
        else if (l2 == NULL)
            return l1;
        else 
        {
            newNode = l1;
            if(l1->val < l2->val)
            {
                l1 = l1->next;
            }
            else 
            {
                newNode = l2;
                l2= l2->next;
            }
              
            ListNode* curr = newNode;
            
            while(l1 && l2)  // l1 and l2 not null
            {
                if(l1->val < l2->val)
                {
                    curr->next = l1;
                    l1 = l1->next;
                }
                else
                {
                    curr->next = l2;
                    l2 = l2->next;
                }
                curr = curr->next;     
            }
            
            if(!l1)  // when the l1 == null
                curr->next = l2;
            else
                curr->next = l1;
            return newNode;
        }
    }
};
